generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Lead {
  id        Int      @id @default(autoincrement())
  name      String
  email     String?
  phone     String?
  status    String? 
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  userId    Int      @map("user_id")
  user      User     @relation(fields: [userId], references: [id])

  @@map("leads")
}

model Customer {
  id          Int      @id @default(autoincrement())
  name        String
  email       String?
  phone       String?
  status      String?  
  lastContact DateTime? @map("last_contact")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  userId      Int      @map("user_id")
  user        User     @relation(fields: [userId], references: [id])

  @@map("customers")
}

model Task {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  status      String?  
  priority    String?   
  dueDate     DateTime? @map("due_date")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  userId      Int      @map("user_id")
  user        User     @relation(fields: [userId], references: [id])

  @@map("tasks")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String   @map("name")
  email     String   @unique @map("email")
  password  String   @map("password")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  customers Customer[]
  leads     Lead[]
  tasks     Task[]
  finances  Finance[]

  @@map("users")
}

model Finance {
  id          String   @id @default(cuid())
  description String   @map("description")
  amount      Float    @map("amount")
  type        String?  @map("type")
  tag         String?  @map("tag")
  date        DateTime? @default(now()) @map("date")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")
  userId      Int      @map("user_id")
  user        User     @relation(fields: [userId], references: [id])

  @@map("finances")
}

model Option {
  id          Int           @id @default(autoincrement())
  label       String
  value       String
  color       String?
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  fieldOptions FieldOptions[]

  @@map("options")
}

model FieldOptions {
  id          Int      @id @default(autoincrement())
  tableName   String   @map("table_name")
  columnName  String   @map("column_name")
  option      Option   @relation(fields: [optionId], references: [id])
  optionId    Int      @map("option_id")
  sortOrder   Int      @default(0) @map("sort_order")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@unique([tableName, columnName, optionId])
  @@map("field_options")
} 